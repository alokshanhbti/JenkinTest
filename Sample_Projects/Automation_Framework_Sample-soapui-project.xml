<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Automation_Framework_Sample" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="USZip"/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Work\soapUI\Projects\Reports"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="USZipSoap" type="wsdl" bindingName="{http://www.webserviceX.NET}USZipSoap" soapVersion="1_1" anonymous="optional" definition="http://www.webservicex.net/uszip.asmx?WSDL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://www.webservicex.net/uszip.asmx?WSDL"><con:part><con:url>http://www.webservicex.net/uszip.asmx?WSDL</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.webserviceX.NET" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://www.webserviceX.NET" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://www.webserviceX.NET">
      <s:element name="GetInfoByZIP">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USZip" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByZIPResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByZIPResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByCity">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USCity" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByCityResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByCityResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByState">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USState" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByStateResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByStateResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByAreaCode">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USAreaCode" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByAreaCodeResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByAreaCodeResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="GetInfoByZIPSoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByZIP"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPSoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByZIPResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCitySoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByCity"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCitySoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByCityResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateSoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByState"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateSoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByStateResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeSoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByAreaCode"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeSoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByAreaCodeResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpGetIn">
    <wsdl:part name="USZip" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpGetIn">
    <wsdl:part name="USCity" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpGetIn">
    <wsdl:part name="USState" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpGetIn">
    <wsdl:part name="USAreaCode" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpPostIn">
    <wsdl:part name="USZip" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpPostIn">
    <wsdl:part name="USCity" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpPostIn">
    <wsdl:part name="USState" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpPostIn">
    <wsdl:part name="USAreaCode" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:portType name="USZipSoap">
    <wsdl:operation name="GetInfoByZIP">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Zip Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByZIPSoapIn"/>
      <wsdl:output message="tns:GetInfoByZIPSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by City</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByCitySoapIn"/>
      <wsdl:output message="tns:GetInfoByCitySoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by state</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByStateSoapIn"/>
      <wsdl:output message="tns:GetInfoByStateSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Area Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByAreaCodeSoapIn"/>
      <wsdl:output message="tns:GetInfoByAreaCodeSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="USZipHttpGet">
    <wsdl:operation name="GetInfoByZIP">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Zip Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByZIPHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByZIPHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by City</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByCityHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByCityHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by state</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByStateHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByStateHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Area Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByAreaCodeHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByAreaCodeHttpGetOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="USZipHttpPost">
    <wsdl:operation name="GetInfoByZIP">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Zip Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByZIPHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByZIPHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by City</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByCityHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByCityHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by state</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByStateHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByStateHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Area Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByAreaCodeHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByAreaCodeHttpPostOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="USZipSoap" type="tns:USZipSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetInfoByZIP">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByZIP" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByCity" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByState" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByAreaCode" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="USZipSoap12" type="tns:USZipSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetInfoByZIP">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByZIP" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByCity" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByState" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByAreaCode" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="USZipHttpGet" type="tns:USZipHttpGet">
    <http:binding verb="GET"/>
    <wsdl:operation name="GetInfoByZIP">
      <http:operation location="/GetInfoByZIP"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <http:operation location="/GetInfoByCity"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <http:operation location="/GetInfoByState"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <http:operation location="/GetInfoByAreaCode"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="USZipHttpPost" type="tns:USZipHttpPost">
    <http:binding verb="POST"/>
    <wsdl:operation name="GetInfoByZIP">
      <http:operation location="/GetInfoByZIP"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <http:operation location="/GetInfoByCity"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <http:operation location="/GetInfoByState"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <http:operation location="/GetInfoByAreaCode"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="USZip">
    <wsdl:port name="USZipSoap" binding="tns:USZipSoap">
      <soap:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
    <wsdl:port name="USZipSoap12" binding="tns:USZipSoap12">
      <soap12:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
    <wsdl:port name="USZipHttpGet" binding="tns:USZipHttpGet">
      <http:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
    <wsdl:port name="USZipHttpPost" binding="tns:USZipHttpPost">
      <http:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#ServiceEndPoint}/uszip.asmx</con:endpoint></con:endpoints><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByAreaCode" name="GetInfoByAreaCode" bindingOperationName="GetInfoByAreaCode" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#ServiceEndPoint}/uszip.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByAreaCode>
         <!--Optional:-->
         <web:USAreaCode>?</web:USAreaCode>
      </web:GetInfoByAreaCode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByAreaCode"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByCity" name="GetInfoByCity" bindingOperationName="GetInfoByCity" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#ServiceEndPoint}/uszip.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByCity>
         <!--Optional:-->
         <web:USCity>Seattle</web:USCity>
      </web:GetInfoByCity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByCity"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByState" name="GetInfoByState" bindingOperationName="GetInfoByState" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#ServiceEndPoint}/uszip.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByState>
         <!--Optional:-->
         <web:USState>WA</web:USState>
      </web:GetInfoByState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByState"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByZIP" name="GetInfoByZIP" bindingOperationName="GetInfoByZIP" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#ServiceEndPoint}/uszip.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByZIP>
         <!--Optional:-->
         <web:USZip>45236</web:USZip>
      </web:GetInfoByZIP>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByZIP"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="USZipSoap12" type="wsdl" bindingName="{http://www.webserviceX.NET}USZipSoap12" soapVersion="1_2" anonymous="optional" definition="http://www.webservicex.net/uszip.asmx?WSDL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://www.webservicex.net/uszip.asmx?WSDL"><con:part><con:url>http://www.webservicex.net/uszip.asmx?WSDL</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.webserviceX.NET" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://www.webserviceX.NET" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://www.webserviceX.NET">
      <s:element name="GetInfoByZIP">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USZip" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByZIPResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByZIPResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByCity">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USCity" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByCityResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByCityResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByState">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USState" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByStateResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByStateResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByAreaCode">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="USAreaCode" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetInfoByAreaCodeResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetInfoByAreaCodeResult">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="GetInfoByZIPSoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByZIP"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPSoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByZIPResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCitySoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByCity"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCitySoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByCityResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateSoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByState"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateSoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByStateResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeSoapIn">
    <wsdl:part name="parameters" element="tns:GetInfoByAreaCode"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeSoapOut">
    <wsdl:part name="parameters" element="tns:GetInfoByAreaCodeResponse"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpGetIn">
    <wsdl:part name="USZip" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpGetIn">
    <wsdl:part name="USCity" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpGetIn">
    <wsdl:part name="USState" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpGetIn">
    <wsdl:part name="USAreaCode" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpGetOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpPostIn">
    <wsdl:part name="USZip" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByZIPHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpPostIn">
    <wsdl:part name="USCity" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByCityHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpPostIn">
    <wsdl:part name="USState" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByStateHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpPostIn">
    <wsdl:part name="USAreaCode" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetInfoByAreaCodeHttpPostOut">
    <wsdl:part name="Body"/>
  </wsdl:message>
  <wsdl:portType name="USZipSoap">
    <wsdl:operation name="GetInfoByZIP">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Zip Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByZIPSoapIn"/>
      <wsdl:output message="tns:GetInfoByZIPSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by City</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByCitySoapIn"/>
      <wsdl:output message="tns:GetInfoByCitySoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by state</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByStateSoapIn"/>
      <wsdl:output message="tns:GetInfoByStateSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Area Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByAreaCodeSoapIn"/>
      <wsdl:output message="tns:GetInfoByAreaCodeSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="USZipHttpGet">
    <wsdl:operation name="GetInfoByZIP">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Zip Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByZIPHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByZIPHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by City</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByCityHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByCityHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by state</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByStateHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByStateHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Area Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByAreaCodeHttpGetIn"/>
      <wsdl:output message="tns:GetInfoByAreaCodeHttpGetOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="USZipHttpPost">
    <wsdl:operation name="GetInfoByZIP">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Zip Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByZIPHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByZIPHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by City</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByCityHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByCityHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by state</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByStateHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByStateHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <wsdl:documentation>Get State Code,City,Area Code,Time Zone,Zip Code by Area Code</wsdl:documentation>
      <wsdl:input message="tns:GetInfoByAreaCodeHttpPostIn"/>
      <wsdl:output message="tns:GetInfoByAreaCodeHttpPostOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="USZipSoap" type="tns:USZipSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetInfoByZIP">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByZIP" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByCity" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByState" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <soap:operation soapAction="http://www.webserviceX.NET/GetInfoByAreaCode" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="USZipSoap12" type="tns:USZipSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetInfoByZIP">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByZIP" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByCity" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByState" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetInfoByAreaCode" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="USZipHttpGet" type="tns:USZipHttpGet">
    <http:binding verb="GET"/>
    <wsdl:operation name="GetInfoByZIP">
      <http:operation location="/GetInfoByZIP"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <http:operation location="/GetInfoByCity"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <http:operation location="/GetInfoByState"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <http:operation location="/GetInfoByAreaCode"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="USZipHttpPost" type="tns:USZipHttpPost">
    <http:binding verb="POST"/>
    <wsdl:operation name="GetInfoByZIP">
      <http:operation location="/GetInfoByZIP"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByCity">
      <http:operation location="/GetInfoByCity"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByState">
      <http:operation location="/GetInfoByState"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetInfoByAreaCode">
      <http:operation location="/GetInfoByAreaCode"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="Body" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="USZip">
    <wsdl:port name="USZipSoap" binding="tns:USZipSoap">
      <soap:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
    <wsdl:port name="USZipSoap12" binding="tns:USZipSoap12">
      <soap12:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
    <wsdl:port name="USZipHttpGet" binding="tns:USZipHttpGet">
      <http:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
    <wsdl:port name="USZipHttpPost" binding="tns:USZipHttpPost">
      <http:address location="http://www.webservicex.net/uszip.asmx"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://www.webservicex.net/uszip.asmx</con:endpoint></con:endpoints><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByAreaCode" name="GetInfoByAreaCode" bindingOperationName="GetInfoByAreaCode" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/uszip.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET">
   <soap:Header/>
   <soap:Body>
      <web:GetInfoByAreaCode>
         <!--Optional:-->
         <web:USAreaCode>?</web:USAreaCode>
      </web:GetInfoByAreaCode>
   </soap:Body>
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/USZipSoap/GetInfoByAreaCodeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByCity" name="GetInfoByCity" bindingOperationName="GetInfoByCity" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/uszip.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET">
   <soap:Header/>
   <soap:Body>
      <web:GetInfoByCity>
         <!--Optional:-->
         <web:USCity>?</web:USCity>
      </web:GetInfoByCity>
   </soap:Body>
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/USZipSoap/GetInfoByCityRequest"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByState" name="GetInfoByState" bindingOperationName="GetInfoByState" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/uszip.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET">
   <soap:Header/>
   <soap:Body>
      <web:GetInfoByState>
         <!--Optional:-->
         <web:USState>?</web:USState>
      </web:GetInfoByState>
   </soap:Body>
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/USZipSoap/GetInfoByStateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetInfoByZIP" name="GetInfoByZIP" bindingOperationName="GetInfoByZIP" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/uszip.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET">
   <soap:Header/>
   <soap:Body>
      <web:GetInfoByZIP>
         <!--Optional:-->
         <web:USZip>?</web:USZip>
      </web:GetInfoByZIP>
   </soap:Body>
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/USZipSoap/GetInfoByZIPRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="CalculatorSoap" type="wsdl" bindingName="{http://tempuri.org/}CalculatorSoap" soapVersion="1_1" anonymous="optional" definition="http://www.dneonline.com/calculator.asmx?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://www.dneonline.com/calculator.asmx?wsdl"><con:part><con:url>http://www.dneonline.com/calculator.asmx?wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://tempuri.org/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://tempuri.org/" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://tempuri.org/">
      <s:element name="Add">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="intA" type="s:int"/>
            <s:element minOccurs="1" maxOccurs="1" name="intB" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="AddResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="AddResult" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="Subtract">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="intA" type="s:int"/>
            <s:element minOccurs="1" maxOccurs="1" name="intB" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="SubtractResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="SubtractResult" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="Multiply">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="intA" type="s:int"/>
            <s:element minOccurs="1" maxOccurs="1" name="intB" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="MultiplyResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="MultiplyResult" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="Divide">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="intA" type="s:int"/>
            <s:element minOccurs="1" maxOccurs="1" name="intB" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="DivideResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="DivideResult" type="s:int"/>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="AddSoapIn">
    <wsdl:part name="parameters" element="tns:Add"/>
  </wsdl:message>
  <wsdl:message name="AddSoapOut">
    <wsdl:part name="parameters" element="tns:AddResponse"/>
  </wsdl:message>
  <wsdl:message name="SubtractSoapIn">
    <wsdl:part name="parameters" element="tns:Subtract"/>
  </wsdl:message>
  <wsdl:message name="SubtractSoapOut">
    <wsdl:part name="parameters" element="tns:SubtractResponse"/>
  </wsdl:message>
  <wsdl:message name="MultiplySoapIn">
    <wsdl:part name="parameters" element="tns:Multiply"/>
  </wsdl:message>
  <wsdl:message name="MultiplySoapOut">
    <wsdl:part name="parameters" element="tns:MultiplyResponse"/>
  </wsdl:message>
  <wsdl:message name="DivideSoapIn">
    <wsdl:part name="parameters" element="tns:Divide"/>
  </wsdl:message>
  <wsdl:message name="DivideSoapOut">
    <wsdl:part name="parameters" element="tns:DivideResponse"/>
  </wsdl:message>
  <wsdl:portType name="CalculatorSoap">
    <wsdl:operation name="Add">
      <wsdl:documentation>Adds two integers. This is a test WebService. ©DNE Online</wsdl:documentation>
      <wsdl:input message="tns:AddSoapIn"/>
      <wsdl:output message="tns:AddSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="Subtract">
      <wsdl:input message="tns:SubtractSoapIn"/>
      <wsdl:output message="tns:SubtractSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="Multiply">
      <wsdl:input message="tns:MultiplySoapIn"/>
      <wsdl:output message="tns:MultiplySoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="Divide">
      <wsdl:input message="tns:DivideSoapIn"/>
      <wsdl:output message="tns:DivideSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CalculatorSoap" type="tns:CalculatorSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="Add">
      <soap:operation soapAction="http://tempuri.org/Add" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Subtract">
      <soap:operation soapAction="http://tempuri.org/Subtract" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Multiply">
      <soap:operation soapAction="http://tempuri.org/Multiply" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Divide">
      <soap:operation soapAction="http://tempuri.org/Divide" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="CalculatorSoap12" type="tns:CalculatorSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="Add">
      <soap12:operation soapAction="http://tempuri.org/Add" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Subtract">
      <soap12:operation soapAction="http://tempuri.org/Subtract" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Multiply">
      <soap12:operation soapAction="http://tempuri.org/Multiply" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Divide">
      <soap12:operation soapAction="http://tempuri.org/Divide" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="Calculator">
    <wsdl:port name="CalculatorSoap" binding="tns:CalculatorSoap">
      <soap:address location="http://www.dneonline.com/calculator.asmx"/>
    </wsdl:port>
    <wsdl:port name="CalculatorSoap12" binding="tns:CalculatorSoap12">
      <soap12:address location="http://www.dneonline.com/calculator.asmx"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint></con:endpoints><con:operation isOneWay="false" action="http://tempuri.org/Add" name="Add" bindingOperationName="Add" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:Add>
         <tem:intA>1</tem:intA>
         <tem:intB>1</tem:intB>
      </tem:Add>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://tempuri.org/Add"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="http://tempuri.org/Divide" name="Divide" bindingOperationName="Divide" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:Divide>
         <tem:intA>?</tem:intA>
         <tem:intB>?</tem:intB>
      </tem:Divide>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://tempuri.org/Divide"/></con:call></con:operation><con:operation isOneWay="false" action="http://tempuri.org/Multiply" name="Multiply" bindingOperationName="Multiply" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:Multiply>
         <tem:intA>?</tem:intA>
         <tem:intB>?</tem:intB>
      </tem:Multiply>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://tempuri.org/Multiply"/></con:call></con:operation><con:operation isOneWay="false" action="http://tempuri.org/Subtract" name="Subtract" bindingOperationName="Subtract" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:Subtract>
         <tem:intA>?</tem:intA>
         <tem:intB>?</tem:intB>
      </tem:Subtract>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://tempuri.org/Subtract"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ReportingAPI" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://a0319p492:2020</con:endpoint></con:endpoints><con:resource name="jira-reporting" path="/testreport/update/jira"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>xml</con:value><con:style>QUERY</con:style><con:default>xml</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateStatus" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element>testreport</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>testreport</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tes="http://schemas.datacontract.org/2004/07/TestReport">tes:ResponseData</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://a0319p492:2020</con:endpoint><con:request><![CDATA[<testreport>
   <testid>SSD-50585</testid>
   <status>failed</status>
</testreport>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="Calculator"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Calculate" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="05ce7733-fde1-47fe-b744-a334b17694c2"><con:settings/><con:testStep type="groovy" name="StartTestCase"><con:settings/><con:config><script>/*
*Framework  Library fles are present in the folder &lt;SoapUi Installation folder>/bin/scripts/frameworklibrary
*/

//This is to force generating new report. This is used as a temporary solution. This should be used only for the first test case in a test run
//This should be passed as an argument while executing the tests throuh test runner.
testRunner.testCase.testSuite.project.setPropertyValue( "GenerateNewReport","true")

//get the project path
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def configFile = projectPath + "\\Config\\default.properties"

//create an instance of DataSourceRead class
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()
// create an instance of CustomReporting class
def customReport = new scripts.frameworklibrary.CustomReporting()

//load the Config properties. Config properties will be loaded as Project property
dataSourceRead.loadConfigurationProperties(configFile,  testRunner, log)

//create the report file
// Method sysntax : createReportFile (String reportBasePath,TestRunner testRunner,TestRunContext context,Logger log)
customReport.createReportFile("DEFAULT",testRunner,context,log)




</script></con:config></con:testStep><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>SlNo</con:name><con:value>1</con:value></con:property><con:property><con:name>JIRA_TestCaseID</con:name><con:value>SSD-50585</con:value></con:property><con:property><con:name>TestCaseName</con:name><con:value>Add and Multiply TC 1 </con:value></con:property><con:property><con:name>Number1</con:name><con:value>1</con:value></con:property><con:property><con:name>Number2</con:name><con:value>2</con:value></con:property><con:property><con:name>exp_Sum</con:name><con:value>3</con:value></con:property><con:property><con:name>exp_Product</con:name><con:value>9</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="DataSource"><con:settings/><con:config><script>//This step will load the data from data sheet to a properties step. 
//From any other step the data can be accessed as ${&lt;propertyStepName>#&lt;propertyName>}

//create an instance of DataSourceRead class and invoke the method readFromDataSheet
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//get the project path
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def dataSheetPath =projectPath + "\\Data\\Calculator_DataSheet.xls"

//Method syntax : readDataFromExcelSheet(String fileName,String sheetName,Integer rowNumber,String propertyStepName,String nextStepAtEndOfData,boolean exitAtEndOfData, TestRunner testRunner,TestRunContext context,Logger log)
dataSourceRead.readDataFromExcelSheet(dataSheetPath,"Calculate",0,"Properties","Finish",true,testRunner,context,log)


</script></con:config></con:testStep><con:testStep type="request" name="Add"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CalculatorSoap</con:interface><con:operation>Add</con:operation><con:request name="Add" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:Add>
         <tem:intA>${Properties#Number1}</tem:intA>
         <tem:intB>${Properties#Number2}</tem:intB>
      </tem:Add>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace xmlns='http://tempuri.org/';
//xmlns:AddResponse/xmlns:AddResult</path><content>${Properties#exp_Sum}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://tempuri.org/Add"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Multiply"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CalculatorSoap</con:interface><con:operation>Multiply</con:operation><con:request name="Multiply"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.dneonline.com/calculator.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:Multiply>
         <tem:intA>${Add#Response#declare namespace xmlns='http://tempuri.org/'; //xmlns:AddResponse/xmlns:AddResult}</tem:intA>
         <tem:intB>${Add#Response#declare namespace xmlns='http://tempuri.org/'; //xmlns:AddResponse/xmlns:AddResult}</tem:intB>
      </tem:Multiply>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace xmlns='http://tempuri.org/';
//xmlns:MultiplyResponse/xmlns:MultiplyResult</path><content>${Properties#exp_Product}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="ReportStatus"><con:settings/><con:config><script>//This step will write the execution reports to a customized report file

// create an instance of CustomReporting class and invoke the mathod reportTestCaseLoopStatus
def customReport = new scripts.frameworklibrary.CustomReporting()

//Method syntax : reportTestCaseLoopStatus(String propertyStepName,TestRunner testRunner,TestRunContext context,Logger log){
customReport.reportTestCaseLoopStatus("Properties",testRunner, context, log)




</script></con:config></con:testStep><con:testStep type="groovy" name="DataSourceLoop"><con:settings/><con:config><script>//This step will check if all the rows of data has been executed. If not it will continue the iteration

//create an instance of DataSourceRead class and invoke the method testDataLoop
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Method syntax : testDataLoop(String nextStepForLooping, String nextStepAtEndOfData,TestRunner testRunner,TestRunContext context,Logger log)
dataSourceRead.testDataSheetLoop("Calculate","DataSource","ReportToJira",testRunner,context,log)

</script></con:config></con:testStep><con:testStep type="groovy" name="Finish"><con:settings/><con:config><script>//This step will add the final content to the report file and close the report

// create an instance of CustomReporting class and invoke the mathod createReportFile
def customReport = new scripts.frameworklibrary.CustomReporting()
//Method syntax : closeReportFile(String reportMessage,TestRunner testRunner,TestRunContext context,Logger log)
customReport.closeReportFile("",testRunner,context,log)		</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="USZip"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="GetInfoByZip" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="202e553c-1177-49c4-863f-61c9617618e2"><con:settings/><con:testStep type="groovy" name="StartTestCase"><con:settings/><con:config><script>/*
*Framework  Library fles are present in the folder &lt;SoapUi Installation folder>/bin/scripts/frameworklibrary
*/

//This is to force generating new report. This should be used only for the first test case in a test run
//While running through test runner we can pass this as an argument
//testRunner.testCase.testSuite.project.setPropertyValue( "GenerateNewReport","true")

//get the project path
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
log.info "Project Path  = " +projectPath
def parentFolder 	= new File(projectPath).parent;
log.info "ParentFolder  = " +parentFolder
def configFilePath 	= parentFolder+"\\Sample_Projects\\ConfigurationDetails\\ConfigurationDetails.properties"
log.info "configFilePath  = " +configFilePath


//create an instance of DataSourceRead class
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//load the Config properties. Config properties will be loaded as Project property
dataSourceRead.loadConfigurationProperties(configFilePath,testRunner,log)

//SET the path of Data sheet
def dataSheetPath = groovyUtils.projectPath + "\\Data\\"
//Method syntax : loadExcelDataSheet(String filePath, TestRunner testRunner,TestRunContext context,Logger log)
//To set the flow of running the test cases 
dataSourceRead.setCurrentDataRow(1,"GetInfoByZip","Finish",testRunner,context,log)
dataSourceRead.setLastDataRow(2,"GetInfoByZip",testRunner,context,log)
//create the report file
// Method sysntax : createReportFile (String reportBasePath,TestRunner testRunner,TestRunContext context,Logger log)
def customReport 		= new scripts.frameworklibrary.CustomReporting()
def reportpath 		= testRunner.testCase.testSuite.project.getPropertyValue("ReportFilePath")
log.info "Report Path  = " +reportpath
//customReport.createReportFile(reportpath,testRunner,context,log)


</script></con:config></con:testStep><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>SlNo</con:name><con:value>2</con:value></con:property><con:property><con:name>JIRA_TestCaseID</con:name><con:value>BR-222</con:value></con:property><con:property><con:name>TestCaseName</con:name><con:value>Test Case 2 - Search San Diego</con:value></con:property><con:property><con:name>USZip</con:name><con:value>92122</con:value></con:property><con:property><con:name>exp_City</con:name><con:value>San Diego</con:value></con:property><con:property><con:name>exp_State</con:name><con:value>CA</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="DataSource"><con:settings/><con:config><script>/*
* This step calls the functions in framework library
* Library fles are available in the folder 
* &lt;SoapUi Installation folder>/bin/scripts/frameworklibrary
*/
//Create instance of groovyUtils
def groovyUtils 	= new com.eviware.soapui.support.GroovyUtils(context)
//To get the project path
def projectPath	= groovyUtils.projectPath
//Parent Folder of the project
def parentFolder 	= new File(projectPath).parent;
//Report Folder
def reportFolder	= testRunner.testCase.testSuite.project.getPropertyValue("ReportFilePath")
//Data Folder
def dataFolder		= projectPath+"\\Data\\GetInfoByZip_DataSheet.xls"
//Configuration File Folder


//create an instance of DataSourceRead class and invoke the method readFromDataSheet
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Mthod syntax : readFromDataSheet(Integer rowNumber,String sheetName,String propertyStepName,String nextStepAtEndOfData,boolean exitAtEndOfData,testRunner,context,log)   { 
dataSourceRead.readDataFromExcelSheet(dataFolder,"GetInfoByZip",0,"Properties","Finish",true,testRunner,context,log)

//def setCurrentDataRow(Integer rowNumber,String sheetName,String nextStepAtEndOfData,TestRunner testRunner,TestRunContext context,Logger log)
 </script></con:config></con:testStep><con:testStep type="request" name="GetInfoByZIP"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>USZipSoap</con:interface><con:operation>GetInfoByZIP</con:operation><con:request name="GetInfoByZIP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#USZipServiceEndPoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByZIP>
         <!--Optional:-->
         <web:USZip>${Properties#USZip}</web:USZip>
      </web:GetInfoByZIP>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="Simple Contains" name="Citi Name Match"><con:configuration><token>${exp_City}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Number of Records"><con:configuration><path>count(//Table)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByZIP"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetInfoByAreaCode"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>USZipSoap</con:interface><con:operation>GetInfoByAreaCode</con:operation><con:request name="GetInfoByAreaCode" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#USZipServiceEndPoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByAreaCode>
         <!--Optional:-->
         <web:USAreaCode>${GetInfoByZIP#Response#//Table/AREA_CODE}</web:USAreaCode>
      </web:GetInfoByAreaCode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByAreaCode"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Validation"><con:settings/><con:config><script>//Adding this step to check how reporting can be handled from a groovy script step

import com.eviware.soapui.support.*;
def groovyUtils    =    new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "GetInfoByZIP#Response" )
def expState = testRunner.testCase.testSteps["Properties"].getPropertyValue("exp_State")
log.info "expected = " + expState
log.info "actual  = " + holder["//STATE"]


if (holder["//STATE"]==expState)
{
	context.TestCaseStatus = "PASS"
	context.TestStatusDesc = context.TestStatusDesc + "Assertion [ State Name ] VALID &lt;br>"
	//log.info " Script assertion pass " +  actual + " Exp " + expected
}
else
{
	
	context.TestCaseStatus = "FAIL"
	context.TestStatusDesc = context.TestStatusDesc + "Assertion [ State Name ] FAIL &lt;br>"
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReportStatus"><con:settings/><con:config><script>// create an instance of CustomReporting class and invoke the mathod reportTestCaseLoopStatus
def customReport = new scripts.frameworklibrary.CustomReporting()

//Method syntax : reportTestCaseLoopStatus(String testStepNames,TestRunner testRunner,TestRunContext context,Logger log){
//in this step pass the step names separated by comma
customReport.reportTestCaseLoopStatus("Properties",testRunner, context, log)



</script></con:config></con:testStep><con:testStep type="groovy" name="DataSourceLoop"><con:settings/><con:config><script>//This step will check if all the rows of data has been executed. If not it will continue the iteration

//create an instance of DataSourceRead class and invoke the method testDataLoop
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Method syntax : testDataLoop(String nextStepForLooping, String nextStepAtEndOfData,TestRunner testRunner,TestRunContext context,Logger log)
dataSourceRead.testDataSheetLoop("GetInfoByZip","DataSource","Finish",testRunner,context,log)

</script></con:config></con:testStep><con:testStep type="groovy" name="Finish"><con:settings/><con:config><script>//This step will add the final content to the report file and close the report

// create an instance of CustomReporting class and invoke the mathod createReportFile
def customReport = new scripts.frameworklibrary.CustomReporting()
//Method syntax : closeReportFile(String reportMessage,TestRunner testRunner,TestRunContext context,Logger log)
customReport.closeReportFile("",testRunner,context,log)		</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetInfoByState" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="66fc250c-3ce8-4049-9586-2daac8c35341"><con:settings/><con:testStep type="groovy" name="StartTestCase"><con:settings/><con:config><script>
//get the project path
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def configFile = projectPath + "\\Config\\default.properties"

//create an instance of DataSourceRead class
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()
// create an instance of CustomReporting class
def customReport = new scripts.frameworklibrary.CustomReporting()

//load the Config properties. Config properties will be loaded as Project property
dataSourceRead.loadConfigurationProperties(configFile,  testRunner, log)

//lcreate the report file
// Method sysntax : createReportFile (String reportBasePath,TestRunner testRunner,TestRunContext context,Logger log)
customReport.createReportFile("DEFAULT",testRunner,context,log)

def dataSheetPath = groovyUtils.projectPath + "\\Data\\"
//Method syntax : loadExcelDataSheet(String filePath, TestRunner testRunner,TestRunContext context,Logger log)
dataSourceRead.loadExcelDataSheet(dataSheetPath +"GetInfoByState_DataSheet.xls","GetInfoByState",testRunner,context,log)

</script></con:config></con:testStep><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>USZip</con:name><con:value>92122</con:value></con:property><con:property><con:name>exp_City</con:name><con:value>San Diego</con:value></con:property><con:property><con:name>exp_State</con:name><con:value>CA</con:value></con:property><con:property><con:name>SlNo</con:name><con:value>2</con:value></con:property><con:property><con:name>TestCaseName</con:name><con:value>Test Case 2 - Search OH</con:value></con:property><con:property><con:name>JIRA_TestCaseID</con:name><con:value>BR-444</con:value></con:property><con:property><con:name>USState</con:name><con:value>OH</con:value></con:property><con:property><con:name>exp_ZipCode1</con:name><con:value>43359</con:value></con:property><con:property><con:name>exp_City1</con:name><con:value>Wharton</con:value></con:property><con:property><con:name>RequestFileName</con:name><con:value>getInfoByState_req.xml</con:value></con:property><con:property><con:name>GetInfoByStateRequestXML</con:name><con:value><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByState>
         <!--Optional:-->
         <web:USState>${Properties#USState}</web:USState>
      </web:GetInfoByState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="DataSource"><con:settings/><con:config><script>//This step will load the data from data sheet to a properties step. 
//From any other step the data can be accessed as ${&lt;propertyStepName>#&lt;propertyName>}

//create an instance of DataSourceRead class and invoke the method readFromDataSheet
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Mthod syntax : readFromDataSheet(Integer rowNumber,TestRunner testRunner,TestRunContext context,Logger log) 
dataSourceRead.readFromDataSheet(0,"GetInfoByState","Properties","Finish",true,testRunner,context,log)

</script></con:config></con:testStep><con:testStep type="groovy" name="LoadRequestFile"><con:settings/><con:config><script>//This step will read the contents of a file and store into a property

//get the folder path
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def ReqFileName = groovyUtils.projectPath + "\\Data\\RequestXML\\" + testRunner.testCase.testSteps["Properties"].getPropertyValue("RequestFileName")

//create an instance of DataSourceRead class and invoke the method readFromDataSheet
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()
//Mthod syntax : readFile(String filePath,String propertyStepName,String propertyName, TestRunner testRunner,Logger log)	{
dataSourceRead.readFile(ReqFileName,"Properties","GetInfoByStateRequestXML",testRunner,log)</script></con:config></con:testStep><con:testStep type="request" name="GetInfoByState"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>USZipSoap</con:interface><con:operation>GetInfoByState</con:operation><con:request name="GetInfoByState" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#USZipServiceEndPoint}</con:endpoint><con:request>${Properties#GetInfoByStateRequestXML}</con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Zip Code Match"><con:configuration><path>//Table[1]/ZIP</path><content>${exp_ZipCode1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Citi Name Match"><con:configuration><path>//Table[1]/CITY</path><content>${exp_City1}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByState"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="ReportStatus"><con:settings/><con:config><script>//This step will write the execution reports to a customized report file

// create an instance of CustomReporting class and invoke the mathod reportTestCaseLoopStatus
def customReport = new scripts.frameworklibrary.CustomReporting()

//Method syntax : reportTestCaseLoopStatus(String testStepNames,TestRunner testRunner,TestRunContext context,Logger log){
customReport.reportTestCaseLoopStatus("Properties",testRunner, context, log)



</script></con:config></con:testStep><con:testStep type="groovy" name="DataSourceLoop"><con:settings/><con:config><script>//This step will check if all the rows of data has been executed. If not it will continue the iteration

//create an instance of DataSourceRead class and invoke the method testDataLoop
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Method syntax : testDataLoop(TestRunner testRunner,TestRunContext context,Logger log)
//dataSourceRead.testDataLoop("DataSource","Finish",testRunner,context,log)
dataSourceRead.testDataSheetLoop("GetInfoByState","DataSource","Finish",testRunner,context,log)


</script></con:config></con:testStep><con:testStep type="groovy" name="Finish"><con:settings/><con:config><script>//This step will add the final content to the report file and close the report

// create an instance of CustomReporting class and invoke the mathod createReportFile
def customReport = new scripts.frameworklibrary.CustomReporting()
//Method syntax : closeReportFile(String reportMessage,TestRunner testRunner,TestRunContext context,Logger log)
customReport.closeReportFile("",testRunner,context,log)		</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:tearDownScript>log.info "--------test suite tear down script----"
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
   testcaseStatus = testCaseResult.getStatus().toString()
   log.info testCaseName
 //  if ( testCaseResult.getStatus().toString() == 'FAILED' )
 //  {
      log.info "$testCaseName completed with status $testcaseStatus "
      for ( testStepResult in testCaseResult.getResults() )
      {
         testStepResult.messages.each() { msg -> log.info msg }
      }
  // }
}</con:tearDownScript></con:testSuite><con:testSuite name="Maven_USZip"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="GetInfoByZip" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="409c7b32-b43a-4eac-b9fa-28cb294cd1b7"><con:settings/><con:testStep type="groovy" name="StartTestCase"><con:settings/><con:config><script>/*
*Framework  Library fles are present in the folder &lt;SoapUi Installation folder>/bin/scripts/frameworklibrary
*/

//This is to force generating new report. This should be used only for the first test case in a test run
//While running through test runner we can pass this as an argument
//testRunner.testCase.testSuite.project.setPropertyValue( "GenerateNewReport","true")

//get the project path
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
log.info "Project Path  = " +projectPath
def parentFolder 	= new File(projectPath).parent;
log.info "ParentFolder  = " +parentFolder


//create an instance of DataSourceRead class
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//SET the path of Data sheet
def dataSheetPath = groovyUtils.projectPath + "\\Data\\"
//Method syntax : loadExcelDataSheet(String filePath, TestRunner testRunner,TestRunContext context,Logger log)
//To set the flow of running the test cases 
dataSourceRead.setCurrentDataRow(1,"GetInfoByZip","Finish",testRunner,context,log)
dataSourceRead.setLastDataRow(2,"GetInfoByZip",testRunner,context,log)
//create the report file
// Method sysntax : createReportFile (String reportBasePath,TestRunner testRunner,TestRunContext context,Logger log)
def customReport 		= new scripts.frameworklibrary.CustomReporting()
def reportpath 		= testRunner.testCase.testSuite.project.getPropertyValue("ReportFilePath")
log.info "Report Path  = " +reportpath
customReport.createReportFile(reportpath,testRunner,context,log)


</script></con:config></con:testStep><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>SlNo</con:name><con:value>2</con:value></con:property><con:property><con:name>JIRA_TestCaseID</con:name><con:value>BR-222</con:value></con:property><con:property><con:name>TestCaseName</con:name><con:value>Test Case 2 - Search San Diego</con:value></con:property><con:property><con:name>USZip</con:name><con:value>92122</con:value></con:property><con:property><con:name>exp_City</con:name><con:value>San Diego</con:value></con:property><con:property><con:name>exp_State</con:name><con:value>CA</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="DataSource"><con:settings/><con:config><script>/*
* This step calls the functions in framework library
* Library fles are available in the folder 
* &lt;SoapUi Installation folder>/bin/scripts/frameworklibrary
*/
//Create instance of groovyUtils
def groovyUtils 	= new com.eviware.soapui.support.GroovyUtils(context)
//To get the project path
def projectPath	= groovyUtils.projectPath
//Parent Folder of the project
def parentFolder 	= new File(projectPath).parent;
//Report Folder
def reportFolder	= testRunner.testCase.testSuite.project.getPropertyValue("ReportFilePath")
//Data Folder
def dataFolder		= projectPath+"\\Data\\GetInfoByZip_DataSheet.xls"
//Configuration File Folder


//create an instance of DataSourceRead class and invoke the method readFromDataSheet
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Mthod syntax : readFromDataSheet(Integer rowNumber,String sheetName,String propertyStepName,String nextStepAtEndOfData,boolean exitAtEndOfData,testRunner,context,log)   { 
dataSourceRead.readDataFromExcelSheet(dataFolder,"GetInfoByZip",0,"Properties","Finish",true,testRunner,context,log)

//def setCurrentDataRow(Integer rowNumber,String sheetName,String nextStepAtEndOfData,TestRunner testRunner,TestRunContext context,Logger log)
 </script></con:config></con:testStep><con:testStep type="request" name="GetInfoByZIP"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>USZipSoap</con:interface><con:operation>GetInfoByZIP</con:operation><con:request name="GetInfoByZIP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#USZipServiceEndPoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByZIP>
         <!--Optional:-->
         <web:USZip>${Properties#USZip}</web:USZip>
      </web:GetInfoByZIP>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="Simple Contains" name="Citi Name Match"><con:configuration><token>${exp_City}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Number of Records"><con:configuration><path>count(//Table)</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByZIP"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetInfoByAreaCode"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>USZipSoap</con:interface><con:operation>GetInfoByAreaCode</con:operation><con:request name="GetInfoByAreaCode" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#USZipServiceEndPoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetInfoByAreaCode>
         <!--Optional:-->
         <web:USAreaCode>${GetInfoByZIP#Response#//Table/AREA_CODE}</web:USAreaCode>
      </web:GetInfoByAreaCode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetInfoByAreaCode"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="ExportResponse"><con:settings/><con:config><script>/*
* 
* @author : Alok Shankar
* Version 1.0	
* Author	Alok Shankar		
* Date Modified	04-Jun-2014	
* Comments Export SOAP Response in txt/XML file in out directory. 
* 						
*/

import com.eviware.soapui.support.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
log.info projectPath
def parentFolder 	= new File(projectPath).parent;
//def configFilePath 	= parentFolder+"\\SVMDMCPPService\\ConfigurationDetails\\ConfigurationDetails.properties"

//create an instance of DataSourceRead class
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//load the Config properties. Config properties will be loaded as Project property
//dataSourceRead.loadConfigurationProperties(configFilePath,testRunner,log)

def responsefilepath 		= testRunner.testCase.testSuite.project.getPropertyValue("ResponseFilePath")
log.info "Responsefilepath  = " + responsefilepath

def Get_ZIP_Response = context.expand( '${GetInfoByZIP#Response}' )
log.info "Response  = " + Get_ZIP_Response
def Get_AreaCode_Response = context.expand( '${GetInfoByAreaCode#Response}' )

//Creating file name using current date and time
def prop 				= testRunner.testCase.getTestStepByName("Properties")
def TestNo              = prop.getPropertyValue("SlNo")
// get the current date and format it
		def date = new Date()
		def dateFormat = new java.text.SimpleDateFormat('yyyy_MM_dd_HHmmss')
		def currentDateTime = dateFormat.format(date)

def fileName = TestNo + "_" + currentDateTime
//def fileName = TestNo 
log.info "File Name  = " + fileName

def inputFile_ZIPResponse = new File(responsefilepath+"_GetInfoByZIPResponse_"+fileName+".xml")

def inputFile_AreaCodeResponse = new File(responsefilepath+"_Get_AreaCode_Response_"+fileName+".xml")

//def inputFile = new File("P:\\WORKBNCH\\GroovyTestScript\\Active_Space\\Get\\ResponseFile\\Files"+fileName+".xml")
//log.info "Input File Name  = " + inputFile
inputFile_ZIPResponse.write(Get_ZIP_Response, "UTF-8")

inputFile_AreaCodeResponse.write(Get_AreaCode_Response, "UTF-8")









</script></con:config></con:testStep><con:testStep type="groovy" name="Validation"><con:settings/><con:config><script>//Adding this step to check how reporting can be handled from a groovy script step

import com.eviware.soapui.support.*;
def groovyUtils    =    new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "GetInfoByZIP#Response" )
def expState = testRunner.testCase.testSteps["Properties"].getPropertyValue("exp_State")
log.info "expected = " + expState
log.info "actual  = " + holder["//STATE"]


if (holder["//STATE"]==expState)
{
	context.TestCaseStatus = "PASS"
	context.TestStatusDesc = context.TestStatusDesc + "Assertion [ State Name ] VALID &lt;br>"
	//log.info " Script assertion pass " +  actual + " Exp " + expected
}
else
{
	
	context.TestCaseStatus = "FAIL"
	context.TestStatusDesc = context.TestStatusDesc + "Assertion [ State Name ] FAIL &lt;br>"
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReportStatus"><con:settings/><con:config><script>// create an instance of CustomReporting class and invoke the mathod reportTestCaseLoopStatus
def customReport = new scripts.frameworklibrary.CustomReporting()

//Method syntax : reportTestCaseLoopStatus(String testStepNames,TestRunner testRunner,TestRunContext context,Logger log){
//in this step pass the step names separated by comma
customReport.reportTestCaseLoopStatus("Properties",testRunner, context, log)



</script></con:config></con:testStep><con:testStep type="groovy" name="DataSourceLoop"><con:settings/><con:config><script>//This step will check if all the rows of data has been executed. If not it will continue the iteration

//create an instance of DataSourceRead class and invoke the method testDataLoop
def dataSourceRead = new scripts.frameworklibrary.DataSourceRead()

//Method syntax : testDataLoop(String nextStepForLooping, String nextStepAtEndOfData,TestRunner testRunner,TestRunContext context,Logger log)
dataSourceRead.testDataSheetLoop("GetInfoByZip","DataSource","Finish",testRunner,context,log)

</script></con:config></con:testStep><con:testStep type="groovy" name="Finish"><con:settings/><con:config><script>//This step will add the final content to the report file and close the report

// create an instance of CustomReporting class and invoke the mathod createReportFile
def customReport = new scripts.frameworklibrary.CustomReporting()
//Method syntax : closeReportFile(String reportMessage,TestRunner testRunner,TestRunContext context,Logger log)
customReport.closeReportFile("",testRunner,context,log)		</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:tearDownScript>log.info "--------test suite tear down script----"
for ( testCaseResult in runner.results )
{
   testCaseName = testCaseResult.getTestCase().name
   testcaseStatus = testCaseResult.getStatus().toString()
   log.info testCaseName
 //  if ( testCaseResult.getStatus().toString() == 'FAILED' )
 //  {
      log.info "$testCaseName completed with status $testcaseStatus "
      for ( testStepResult in testCaseResult.getResults() )
      {
         testStepResult.messages.each() { msg -> log.info msg }
      }
  // }
}</con:tearDownScript></con:testSuite><con:properties><con:property><con:name>GenerateNewReport</con:name><con:value/></con:property><con:property><con:name>CreateHTMLReport</con:name><con:value/></con:property><con:property><con:name>USZipServiceEndPoint</con:name><con:value/></con:property><con:property><con:name>ReportingServiceEndPoint</con:name><con:value/></con:property><con:property><con:name>ReportFilePath</con:name><con:value/></con:property><con:property><con:name>HtmlReportFileName</con:name><con:value/></con:property><con:property><con:name>ResponseFilePath</con:name><con:value/></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>